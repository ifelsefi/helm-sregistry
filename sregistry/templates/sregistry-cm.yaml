apiVersion: v1
kind: ConfigMap
metadata:
  name: shub-config
  labels:
  {{- include "sregistry.labels" . | nindent 4 }}
data: 
  secrets.py: |-
    SECRET_KEY = {{ randAlphaNum 50 | quote }}
  config.py: |-
    """
    
    Copyright (C) 2017-2020 Vanessa Sochat.

    This Source Code Form is subject to the terms of the
    Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed
    with this file, You can obtain one at http://mozilla.org/MPL/2.0/.

    """

    # AUTHENTICATION

    # Which social auths do you want to use?
    ENABLE_GOOGLE_AUTH = {{ .Values.config.auth.google  }}
    ENABLE_TWITTER_AUTH = {{ .Values.config.auth.twitter }}
    ENABLE_GITHUB_AUTH = {{ .Values.config.auth.github  }}
    ENABLE_GITLAB_AUTH = {{ .Values.config.auth.gitlab  }}
    ENABLE_BITBUCKET_AUTH = {{ .Values.config.auth.bitbucket }}

    # NOTE you will need to set autehtication methods up.
    # Configuration goes into secrets.py
    # see https://singularityhub.github.io/sregistry/install.html
    # secrets.py.example provides a template to work from

    # See below for additional authentication module, e.g. LDAP that are
    # available, and configured, as plugins.

    # DOMAIN NAMES
    ## IMPORTANT: if/when you switch to https, you need to change "DOMAIN_NAME"
    # to have https, otherwise some functionality will not work (e.g., GitHub webhooks)

    DOMAIN_NAME = "http://{{ .Values.config.domainName }}"
    DOMAIN_NAME_HTTP = "http://{{ .Values.config.domainName }}"
    DOMAIN_NAKED = DOMAIN_NAME_HTTP.replace("http://", "")

    ADMINS = (("vsochat", "vsochat@gmail.com"),)
    MANAGERS = ADMINS

    HELP_CONTACT_EMAIL = "vsochat@stanford.edu"
    HELP_INSTITUTION_SITE = "https://srcc.stanford.edu"
    REGISTRY_NAME = {{ .Values.config.registryName | quote }}
    REGISTRY_URI =  {{ .Values.config.registryUri  | quote }}
    GOOGLE_ANALYTICS = None  # "UA-XXXXXXXXX"

    # Permissions and Views

    # Set this to be some size in MB to limit uploads.
    # Uploads > 2.5GB will not use memory, but the filesystem
    DATA_UPLOAD_MAX_MEMORY_SIZE = None

    # Allow users to create public collections
    USER_COLLECTIONS = True

    # Limit users to N collections (None is unlimited)
    USER_COLLECTION_LIMIT = 2

    # Should registries by default be private, with no option for public?
    PRIVATE_ONLY = False

    # Should the default for a new registry be private or public?
    DEFAULT_PRIVATE = False

    # The number of collections to show on the /<domain>/collections page
    COLLECTIONS_VIEW_PAGE_COUNT = 250

    # The maximum number of downloads allowed per container/collection, per week
    CONTAINER_WEEKLY_GET_LIMIT = 100
    COLLECTION_WEEKLY_GET_LIMIT = 100

    # Disable all pushes of containers, recipes, etc. Also for Google Cloud Build
    DISABLE_BUILDING = False

    # Plugins ######################################################################
    # See dummy_secrets.py for more details.

    SREGISTRY_GOOGLE_BUILD_LIMIT = 100
    SREGISTRY_GOOGLE_BUILD_SINGULARITY_VERSION = "v3.3.0-slim"
    SREGISTRY_GOOGLE_BUILD_TIMEOUT_SECONDS = None  # None defaults to 10 minutes
    SREGISTRY_GOOGLE_BUILD_EXPIRE_SECONDS = 28800
    CONTAINER_SIGNED_URL_EXPIRE_SECONDS = 10

    # A global setting to disable all webhooks / interaction with Github
    DISABLE_GITHUB = False

    # A global setting to disable all building
    DISABLE_BUILDING = False

    # prevent responses from being received from Google Cloud Build
    DISABLE_BUILD_RECEIVE = False

    # DATABASE

    # https://docs.djangoproject.com/en/1.9/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": {{ .Values.config.database.name | quote }},
            "USER": {{ .Values.config.database.user | quote }},
            "HOST": {{ .Values.config.database.host | quote }},
            "PORT": {{ .Values.config.database.port | quote }},
        }
    }

    # STORAGE

    MINIO_SERVER = "{{ .Values.config.minio.server }}:{{ .Values.config.minio.port }}"  # Internal to sregistry
    MINIO_EXTERNAL_SERVER = (
        "{{ .Values.config.minio.external }}:{{ .Values.config.minio.port }}"  # minio server for Singularity to interact with
    )
    MINIO_BUCKET = {{ .Values.config.minio.bucket | quote }}
    MINIO_SSL = False  # use SSL for minio
    MINIO_SIGNED_URL_EXPIRE_MINUTES = 5
    MINIO_REGION = {{ .Values.config.minio.region | quote }}
    MINIO_MULTIPART_UPLOAD = True

    # Logging

    # Do you want to save complete response metadata per each pull?
    # If you disable, we still keep track of collection pull counts, but not specific versions
    LOGGING_SAVE_RESPONSES = True

    # Rate Limits

    VIEW_RATE_LIMIT = "50/1d"  # The rate limit for each view, django-ratelimit, "50 per day per ipaddress)
    VIEW_RATE_LIMIT_BLOCK = (
        True  # Given that someone goes over, are they blocked for the period?
    )

    # Plugins
    # Add the name of a plugin under shub.plugins here to enable it

    # Available Plugins:

    # - ldap_auth: Allows sregistry to authenticate against an LDAP directory
    # - google_build: a custom storage with that uses Google Cloud Build + Storage
    # - pam_auth: Allow users from (docker) host to log in
    # - globus: allows connection from sregistry to endpoints
    # - saml_auth: authentication with SAML
    # - pgp: deploy a key server alongside your registry

    PLUGINS_ENABLED = [
        #    'pgp'
        #    'ldap_auth',
        #    'google_build'
        #    'pam_auth',
        #    'globus',
        #    'saml_auth'
    ]

  default.conf: |-
    server {
      listen                *:80;
      server_name           localhost;

      client_max_body_size 10024M;
      client_body_buffer_size 10024M;
      client_body_timeout 120;

      add_header X-Clacks-Overhead "GNU Terry Pratchett";
      add_header X-Clacks-Overhead "GNU Terry Pratchet";
      add_header Access-Control-Allow-Origin *;
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

      location /images {
        alias /var/www/images;
      }

      location ~* \.(php|aspx|myadmin|asp)$ {
        deny all;
      }

      location / {
        include /etc/nginx/uwsgi_params.par;
        uwsgi_pass {{ .Values.config.uwsgi.host }}:{{ .Values.config.uwsgi.port }};
        uwsgi_max_temp_file_size 10024m;
      }

      location /static {
        alias /var/www/static;
      }

      location /upload {

        # Pass altered request body to this location
        upload_pass   /api/uploads/complete/;
        
        # Store files to this directory
        # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
        upload_store /var/www/images/_upload 1;        
        upload_store_access user:rw group:rw all:rw;
        
        # Set specified fields in request body
        upload_set_form_field $upload_field_name.name "$upload_file_name";
        upload_set_form_field $upload_field_name.content_type "$upload_content_type";
        upload_set_form_field $upload_field_name.path "$upload_tmp_path";
        
        # Inform backend about hash and size of a file
        upload_aggregate_form_field "$upload_field_name.md5" "$upload_file_md5";
        upload_aggregate_form_field "$upload_field_name.size" "$upload_file_size";
        
        upload_pass_form_field "^submit$|^description$";
        upload_pass_form_field "^SREGISTRY_EVENT$";
        upload_pass_form_field "^collection$";
        upload_pass_form_field "^name$";
        upload_pass_form_field "^tag$";
        upload_cleanup 400-599;
      }
    }
  uwsgi_params.par: |-
    uwsgi_param  QUERY_STRING       $query_string;
    uwsgi_param  REQUEST_METHOD     $request_method;
    uwsgi_param  CONTENT_TYPE       $content_type;
    uwsgi_param  CONTENT_LENGTH     $content_length;

    uwsgi_param  REQUEST_URI        $request_uri;
    uwsgi_param  PATH_INFO          $document_uri;
    uwsgi_param  DOCUMENT_ROOT      $document_root;
    uwsgi_param  SERVER_PROTOCOL    $server_protocol;
    uwsgi_param  HTTPS              $https if_not_empty;

    uwsgi_param  REMOTE_ADDR        $remote_addr;
    uwsgi_param  REMOTE_PORT        $remote_port;
    uwsgi_param  SERVER_PORT        $server_port;
    uwsgi_param  SERVER_NAME        $server_name;
